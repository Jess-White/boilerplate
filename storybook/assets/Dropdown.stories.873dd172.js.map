{"version":3,"file":"Dropdown.stories.873dd172.js","sources":["../../../src/Components/design/Dropdown/Dropdown.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { useId } from \"@react-aria/utils\";\nimport { MdExpandMore } from \"react-icons/md\";\nimport Button from \"../Button/Button\";\nimport DropdownMenu from \"./DropdownMenu\";\nimport { optionPropType } from \"./DropdownMenuItem\";\nimport DropdownContext from \"./DropdownContext\";\nimport \"./Dropdown.css\";\n\nexport default function Dropdown(props) {\n  const {\n    className,\n    onChange,\n    options,\n    placeholder,\n    value,\n    labelText,\n    altLabel,\n    onClickAltLabel,\n  } = props;\n  const dropdownEl = useRef(null);\n\n  const labelId = useId();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [focusedOption, setFocusedOption] = useState(options[0]);\n  const selectedOption =\n    options.find((option) => option.value === value) || null;\n  const context = {\n    focusedOption,\n    isMenuOpen,\n    labelId,\n    options,\n    selectedOption,\n    setFocusedOption,\n    setIsMenuOpen,\n    setSelectedOption: onChange,\n  };\n\n  // Hides menu when clicking outside dropdown\n  useEffect(() => {\n    const handleDocumentClick = (event) => {\n      if (!dropdownEl.current?.contains(event.target) && isMenuOpen) {\n        setIsMenuOpen(false);\n      }\n    };\n\n    document.addEventListener(\"click\", handleDocumentClick, false);\n\n    return () => {\n      document.removeEventListener(\"click\", handleDocumentClick, false);\n    };\n  }, [isMenuOpen]);\n\n  return (\n    <DropdownContext.Provider value={context}>\n      <div\n        className={clsx(className, \"dropdown\")}\n        ref={dropdownEl}\n        onKeyDown={(event) => {\n          if (event.key === \"Escape\") {\n            setIsMenuOpen(false);\n          }\n        }}\n      >\n        <span id={labelId} className=\"dropdown__label\">\n          <div onClick={() => setIsMenuOpen(true)}>{labelText}</div>\n          {altLabel && (\n            <Button\n              className=\"dropdown__alt-label\"\n              variant=\"none\"\n              onClick={onClickAltLabel}\n            >\n              {altLabel}\n            </Button>\n          )}\n        </span>\n        <Button\n          variant=\"none\"\n          className=\"dropdown__input\"\n          aria-haspopup=\"listbox\"\n          onMouseDown={(event) => {\n            event.stopPropagation();\n            event.preventDefault();\n\n            setIsMenuOpen((isOpen) => !isOpen);\n          }}\n          onKeyDown={(event) => {\n            if (event.key === \"Enter\" || event.key === \" \") {\n              setIsMenuOpen((isOpen) => !isOpen);\n            }\n          }}\n        >\n          {selectedOption ? (\n            <span>{selectedOption.label}</span>\n          ) : (\n            <span className=\"dropdown__placeholder\">{placeholder}</span>\n          )}\n          <MdExpandMore />\n        </Button>\n        <DropdownMenu\n          aria-expanded={isMenuOpen}\n          hidden={!isMenuOpen}\n          options={options}\n        />\n      </div>\n    </DropdownContext.Provider>\n  );\n}\n\nDropdown.propTypes = {\n  className: PropTypes.string,\n  labelText: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(optionPropType).isRequired,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool,\n  value: PropTypes.string,\n};\n\nDropdown.defaultProps = {\n  required: false,\n};\n"],"names":["props","className","onChange","options","placeholder","value","labelText","altLabel","onClickAltLabel","dropdownEl","useRef","labelId","useId","isMenuOpen","setIsMenuOpen","useState","focusedOption","setFocusedOption","selectedOption","find","option","context","setSelectedOption","useEffect","handleDocumentClick","event","current","contains","target","addEventListener","removeEventListener","_jsx","clsx","key","_jsxs","stopPropagation","preventDefault","isOpen","label","Dropdown","propTypes","PropTypes","string","isRequired","func","arrayOf","optionPropType","required","bool","defaultProps"],"mappings":"+YAWA,WAAAA,EAAA,CACA,KAAA,CACAC,YACAC,WACAC,UACAC,cACAC,QACAC,YACAC,WACAC,mBACAR,EACAS,EAAAC,iBAAA,IAAA,EAEAC,EAAAC,IACA,CAAAC,EAAAC,GAAAC,EAAAA,QAAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,GAAAF,EAAAA,QAAAA,SAAAZ,EAAA,EAAA,EACAe,EACAf,EAAAgB,KAAAC,GAAAA,EAAAf,QAAAA,CAAA,GAAA,KACAgB,EAAA,CACAL,gBACAH,aACAF,UACAR,UACAe,iBACAD,mBACAH,gBACAQ,kBAAApB,CAAAA,EAIAqB,SAAAA,QAAAA,UAAA,IAAA,CACA,KAAAC,GAAAC,AAAA,GAAA,OACA,AAAA,CAAAhB,MAAAiB,UAAAjB,QAAAkB,SAAAF,EAAAG,UAAAf,GACAC,EAAA,EAAA,CACA,EAGAe,gBAAAA,iBAAA,QAAAL,EAAA,EAAA,EAEA,IAAA,CACAM,SAAAA,oBAAA,QAAAN,EAAA,EAAA,CAAA,CACA,EACA,CAAAX,CAAA,CAZA,EAeAkB,EAAA,EAAA,SAAA,CAAA,MAAAV,EAAA,WACA,MAAA,CACA,UAAAW,EAAA/B,EAAA,UAAA,EACA,IAAAQ,EACA,UAAAgB,AAAA,GAAA,CACAA,AAAAA,EAAAQ,MAAA,UACAnB,EAAA,EAAA,CAEA,EAPA,SASA,CAAAoB,EAAA,OAAA,CAAA,GAAAvB,EAAA,UAAA,kBAAA,SACA,CAAAoB,EAAA,MAAA,CAAA,QAAA,IAAAjB,EAAA,EAAA,EAAA,SAAAR,CAAAA,CAAA,EACAC,GACAwB,EAAA,EAAA,CACA,UAAA,sBACA,QAAA,OACA,QAAAvB,EAHA,SAKAD,CAAAA,CARA,CAAA,CAAA,CATA,EAqBA2B,EAAA,EAAA,CACA,QAAA,OACA,UAAA,kBACA,gBAAA,UACA,YAAAT,AAAA,GAAA,CACAA,EAAAU,gBAAA,EACAV,EAAAW,eAAA,EAEAC,EAAAA,AAAAA,GAAA,CAAAA,CAAA,CACA,EACA,UAAAZ,AAAA,GAAA,CACA,AAAAA,GAAAQ,MAAA,SAAAR,EAAAQ,MAAA,MACAI,EAAAA,AAAAA,GAAA,CAAAA,CAAA,CAEA,EAdA,SAAA,CAgBAnB,EACAa,EAAA,OAAA,CAAA,SAAAb,EAAAoB,KAAAA,CAAA,EAEAP,EAAA,OAAA,CAAA,UAAA,wBAAA,SAAA3B,CAnBA,CAAA,EAqBA2B,EAAA,EArBA,CAAA,CAAA,CAAA,CAAA,CArBA,EA4CAA,EAAA,EAAA,CACA,gBAAAlB,EACA,OAAA,CAAAA,EACA,SAAA,CA/CA,CAAA,CAAA,CAAA,CAAA,CAFA,CAsDA,CAEA0B,EAAAC,UAAA,CACAvC,UAAAwC,EAAAC,OACApC,UAAAmC,EAAAC,OAAAC,WACAzC,SAAAuC,EAAAG,KAAAD,WACAxC,QAAAsC,EAAAI,QAAAC,CAAA,EAAAH,WACAvC,YAAAqC,EAAAC,OACAK,SAAAN,EAAAO,KACA3C,MAAAoC,EAAAC,MAPA,EAUAH,EAAAU,aAAA,CACAF,SAAA,EADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}