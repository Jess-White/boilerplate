{"version":3,"file":"Dropdown.stories.a0ff2f1b.js","sources":["../../../src/Components/design/Dropdown/Dropdown.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { useId } from \"@react-aria/utils\";\nimport { MdExpandMore } from \"react-icons/md\";\nimport Button from \"../Button/Button\";\nimport DropdownMenu from \"./DropdownMenu\";\nimport { optionPropType } from \"./DropdownMenuItem\";\nimport DropdownContext from \"./DropdownContext\";\nimport \"./Dropdown.css\";\n\nexport default function Dropdown(props) {\n  const {\n    className,\n    onChange,\n    options,\n    placeholder,\n    value,\n    labelText,\n    altLabel,\n    onClickAltLabel,\n  } = props;\n  const dropdownEl = useRef(null);\n\n  const labelId = useId();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [focusedOption, setFocusedOption] = useState(options[0]);\n  const selectedOption =\n    options.find((option) => option.value === value) || null;\n  const context = {\n    focusedOption,\n    isMenuOpen,\n    labelId,\n    options,\n    selectedOption,\n    setFocusedOption,\n    setIsMenuOpen,\n    setSelectedOption: onChange,\n  };\n\n  // Hides menu when clicking outside dropdown\n  useEffect(() => {\n    const handleDocumentClick = (event) => {\n      if (!dropdownEl.current?.contains(event.target) && isMenuOpen) {\n        setIsMenuOpen(false);\n      }\n    };\n\n    document.addEventListener(\"click\", handleDocumentClick, false);\n\n    return () => {\n      document.removeEventListener(\"click\", handleDocumentClick, false);\n    };\n  }, [isMenuOpen]);\n\n  return (\n    <DropdownContext.Provider value={context}>\n      <div\n        className={clsx(className, \"dropdown\")}\n        ref={dropdownEl}\n        onKeyDown={(event) => {\n          if (event.key === \"Escape\") {\n            setIsMenuOpen(false);\n          }\n        }}\n      >\n        <span id={labelId} className=\"dropdown__label\">\n          <div onClick={() => setIsMenuOpen(true)}>{labelText}</div>\n          {altLabel && (\n            <Button\n              className=\"dropdown__alt-label\"\n              variant=\"none\"\n              onClick={onClickAltLabel}\n            >\n              {altLabel}\n            </Button>\n          )}\n        </span>\n        <Button\n          variant=\"none\"\n          className=\"dropdown__input\"\n          aria-haspopup=\"listbox\"\n          onMouseDown={(event) => {\n            event.stopPropagation();\n            event.preventDefault();\n\n            setIsMenuOpen((isOpen) => !isOpen);\n          }}\n          onKeyDown={(event) => {\n            if (event.key === \"Enter\" || event.key === \" \") {\n              setIsMenuOpen((isOpen) => !isOpen);\n            }\n          }}\n        >\n          {selectedOption ? (\n            <span>{selectedOption.label}</span>\n          ) : (\n            <span className=\"dropdown__placeholder\">{placeholder}</span>\n          )}\n          <MdExpandMore />\n        </Button>\n        <DropdownMenu\n          aria-expanded={isMenuOpen}\n          hidden={!isMenuOpen}\n          options={options}\n        />\n      </div>\n    </DropdownContext.Provider>\n  );\n}\n\nDropdown.propTypes = {\n  className: PropTypes.string,\n  labelText: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(optionPropType).isRequired,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool,\n  value: PropTypes.string,\n};\n\nDropdown.defaultProps = {\n  required: false,\n};\n"],"names":["props","className","onChange","options","placeholder","value","labelText","altLabel","onClickAltLabel","dropdownEl","useRef","labelId","useId","isMenuOpen","setIsMenuOpen","useState","focusedOption","setFocusedOption","selectedOption","find","option","context","setSelectedOption","useEffect","handleDocumentClick","event","current","contains","target","addEventListener","removeEventListener","_jsx","clsx","key","_jsxs","stopPropagation","preventDefault","isOpen","label","Dropdown","propTypes","PropTypes","string","isRequired","func","arrayOf","optionPropType","required","bool","defaultProps"],"mappings":"2YAWA,WAAiCA,EAAO,CAChC,KAAA,CACJC,YACAC,WACAC,UACAC,cACAC,QACAC,YACAC,WACAC,mBACER,EACES,EAAaC,iBAAO,IAAD,EAEnBC,EAAUC,IACV,CAACC,EAAYC,GAAiBC,EAAAA,QAAAA,SAAS,EAAD,EACtC,CAACC,EAAeC,GAAoBF,EAAAA,QAAAA,SAASZ,EAAQ,EAAT,EAC5Ce,EACJf,EAAQgB,KAAMC,GAAWA,EAAOf,QAAUA,CAA1C,GAAoD,KAChDgB,EAAU,CACdL,gBACAH,aACAF,UACAR,UACAe,iBACAD,mBACAH,gBACAQ,kBAAmBpB,CAAAA,EAIrBqB,SAAAA,QAAAA,UAAU,IAAM,CACd,KAAMC,GAAuBC,AAAU,GAAA,OACrC,AAAI,CAAChB,MAAWiB,UAAXjB,QAAoBkB,SAASF,EAAMG,UAAWf,GACjDC,EAAc,EAAD,CACd,EAGMe,gBAAAA,iBAAiB,QAASL,EAAqB,EAAxD,EAEO,IAAM,CACFM,SAAAA,oBAAoB,QAASN,EAAqB,EAA3D,CAAA,CACD,EACA,CAACX,CAAD,CAZM,EAePkB,EAAC,EAAgB,SAAjB,CAA0B,MAAOV,EAAjC,WACE,MAAA,CACE,UAAWW,EAAK/B,EAAW,UAAZ,EACf,IAAKQ,EACL,UAAYgB,AAAU,GAAA,CAChBA,AAAAA,EAAMQ,MAAQ,UAChBnB,EAAc,EAAD,CAEhB,EAPH,SASE,CAAAoB,EAAA,OAAA,CAAM,GAAIvB,EAAS,UAAU,kBAA7B,SACE,CAAAoB,EAAA,MAAA,CAAK,QAAS,IAAMjB,EAAc,EAAD,EAAjC,SAA0CR,CAAAA,CAA1C,EACCC,GACCwB,EAAC,EAAD,CACE,UAAU,sBACV,QAAQ,OACR,QAASvB,EAHX,SAKGD,CAAAA,CARP,CAAA,CAAA,CATF,EAqBE2B,EAAC,EAAD,CACE,QAAQ,OACR,UAAU,kBACV,gBAAc,UACd,YAAcT,AAAU,GAAA,CACtBA,EAAMU,gBAAN,EACAV,EAAMW,eAAN,EAEeC,EAAAA,AAAAA,GAAW,CAACA,CAAd,CACd,EACD,UAAYZ,AAAU,GAAA,CACpB,AAAIA,GAAMQ,MAAQ,SAAWR,EAAMQ,MAAQ,MAC1BI,EAAAA,AAAAA,GAAW,CAACA,CAAd,CAEhB,EAdH,SAAA,CAgBGnB,EACCa,EAAA,OAAA,CAAA,SAAOb,EAAeoB,KAAAA,CAAtB,EAEAP,EAAA,OAAA,CAAM,UAAU,wBAAhB,SAAyC3B,CAnB7C,CAAA,EAqBE2B,EAAC,EArBH,CAAA,CAAA,CAAA,CAAA,CArBF,EA4CEA,EAAC,EAAD,CACE,gBAAelB,EACf,OAAQ,CAACA,EACT,SAAA,CA/CJ,CAAA,CAAA,CAAA,CAAA,CAFJ,CAsDD,CAED0B,EAASC,UAAY,CACnBvC,UAAWwC,EAAUC,QAAAA,OACrBpC,UAAWmC,EAAAA,QAAUC,OAAOC,WAC5BzC,SAAUuC,EAAAA,QAAUG,KAAKD,WACzBxC,QAASsC,EAAAA,QAAUI,QAAQC,CAAlB,EAAkCH,WAC3CvC,YAAaqC,EAAUC,QAAAA,OACvBK,SAAUN,EAAUO,QAAAA,KACpB3C,MAAOoC,EAAUC,QAAAA,MAPE,EAUrBH,EAASU,aAAe,CACtBF,SAAU,EADY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}